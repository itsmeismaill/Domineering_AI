Index: src/main/java/com/example/domineering/MainApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.domineering;\r\n\r\nimport javafx.animation.TranslateTransition;\r\nimport javafx.application.Application;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class MainApplication extends Application {\r\n\r\n    private static final int BOX_SIZE = 140; // Size of the box\r\n    private static final int NUM_SQUARES = 5; // Number of squares in each dimension\r\n\r\n    private int currentPlayer = 1; // 1 for horizontal player, 2 for vertical player\r\n\r\n    //? first player is horizontal player\r\n    private static final Color FIRST_PLAYER_COLOR = Color.RED;\r\n    private static final Color FIRST_PLAYER_HOVER_COLOR = Color.web(\"#ffc9c9\");\r\n    private static final Color FIRST_PLAYER_HOVER_FILL_COLOR = Color.web(\"#e03131\");\r\n\r\n    //? second player is vertical player\r\n    private static final Color SECOND_PLAYER_COLOR = Color.web(\"#1864ab\");\r\n    private static final Color SECOND_PLAYER_HOVER_COLOR = Color.web(\"#1864ab\");\r\n    private static final Color SECOND_PLAYER_HOVER_FILL_COLOR = Color.web(\"74c0fc\");\r\n\r\n    private static final Color DEFAULT_FILL_COLOR = Color.TRANSPARENT;\r\n    private static final Color DEFAULT_FILL_COLOR_2 = Color.GRAY;\r\n    private static final Color DEFAULT_STROKE_COLOR = Color.BLACK;\r\n\r\n    private int movesPlayer1 = 0;\r\n    private int movesPlayer2 = 0;\r\n    private Label movesPlayer1Label;\r\n    private Label movesPlayer2Label;\r\n   private  Rectangle rectanglePlayer1= new Rectangle((BOX_SIZE * NUM_SQUARES)/13, (BOX_SIZE * NUM_SQUARES)/13);\r\n  private  Rectangle rectanglePlayer2= new Rectangle((BOX_SIZE * NUM_SQUARES)/13, (BOX_SIZE * NUM_SQUARES)/13);\r\n\r\n\r\n\r\n    private static final boolean DEBUG = false;\r\n\r\n    private final GridPane gridPane = new GridPane();\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        // Set the title of the window\r\n        stage.setTitle(\"Welcome to Domineering Game!\");\r\n\r\n\r\n        int squareSize = (BOX_SIZE / NUM_SQUARES)*3;\r\n\r\n        for (int row = 0; row < NUM_SQUARES; row++) {\r\n            for (int col = 0; col < NUM_SQUARES; col++) {\r\n                Rectangle square = new Rectangle(squareSize, squareSize);\r\n                square.setFill((row + col) % 2 == 0 ? DEFAULT_FILL_COLOR : DEFAULT_FILL_COLOR_2);\r\n                square.setStroke(DEFAULT_STROKE_COLOR);\r\n                square.setStrokeWidth(2);\r\n                // Add the square to the grid\r\n                gridPane.add(square, col, row);\r\n                if (DEBUG) {\r\n                    gridPane.add(new Text(col + \",\" + row), col, row);\r\n                }\r\n\r\n                square.getProperties().put(\"col\", col);\r\n                square.getProperties().put(\"row\", row);\r\n\r\n                square.setOnMouseClicked(this::onSquareClicked);\r\n\r\n                square.setOnMouseEntered(event -> {\r\n                    Rectangle hoveredSquare = (Rectangle) event.getSource();\r\n                    Rectangle neighbourSquare = getNeighbourSquare((Rectangle) event.getSource());\r\n                    if (neighbourSquare == null) return;\r\n\r\n                    Paint currentPlayerHoverColor = this.currentPlayer == 1 ? FIRST_PLAYER_HOVER_COLOR : SECOND_PLAYER_HOVER_COLOR;\r\n                    Paint currentPlayerFillColor = this.currentPlayer == 1 ? FIRST_PLAYER_HOVER_FILL_COLOR : SECOND_PLAYER_HOVER_FILL_COLOR;\r\n\r\n                    hoveredSquare.setStroke(currentPlayerHoverColor);\r\n                    hoveredSquare.setFill(currentPlayerFillColor);\r\n                    neighbourSquare.setStroke(currentPlayerHoverColor);\r\n                    neighbourSquare.setFill(currentPlayerFillColor);\r\n                });\r\n\r\n                square.setOnMouseExited(event -> {\r\n                    Rectangle hoveredSquare = (Rectangle) event.getSource();\r\n                    Rectangle neighbourSquare = getNeighbourSquare((Rectangle) event.getSource());\r\n                    resetRectangleColors(hoveredSquare, neighbourSquare);\r\n                });\r\n            }\r\n        }\r\n        //add a title to the game\r\n        Text title = new Text(\"Domineering Game\");\r\n        title.setStyle(\"-fx-font-size: 50px; -fx-font-weight: bold; -fx-font-family: Monospaced;\");\r\n        //add a color black to the title\r\n        title.setFill(Color.BLACK);\r\n        title.setStroke(Color.GRAY);\r\n        title.setStrokeWidth(2);\r\n        TranslateTransition translateTransition = new TranslateTransition(Duration.seconds(2), title);\r\n        // Définir les propriétés de l'animation (déplacement vers le haut et le bas)\r\n        translateTransition.setFromY(0);\r\n        translateTransition.setToY(-20);\r\n        translateTransition.setCycleCount(TranslateTransition.INDEFINITE);\r\n        translateTransition.setAutoReverse(true);\r\n        // Démarrer l'animation\r\n        translateTransition.play();\r\n\r\n        //add a rectangle\r\n        Rectangle rectangle = new Rectangle((BOX_SIZE * NUM_SQUARES)/1.3, (BOX_SIZE * NUM_SQUARES)/1.5);\r\n        rectangle.setFill(Color.TRANSPARENT);\r\n        rectangle.setStroke(Color.BLACK);\r\n        rectangle.setStrokeWidth(2);\r\n        rectanglePlayer1.setStroke(Color.BLACK);\r\n        rectanglePlayer2.setStroke(Color.BLACK);\r\n        if (this.currentPlayer == 1) {\r\n            rectanglePlayer1.setFill(FIRST_PLAYER_COLOR);\r\n            rectanglePlayer2.setFill(DEFAULT_FILL_COLOR);\r\n        } else {\r\n            rectanglePlayer2.setFill(SECOND_PLAYER_COLOR);\r\n            rectanglePlayer1.setFill(DEFAULT_FILL_COLOR);\r\n        }\r\n        GridPane table = new GridPane();\r\n        table.setHgap(10); // Espace horizontal entre les colonnes\r\n        table.setVgap(10); // Espace vertical entre les lignes\r\n        table.setPadding(new Insets(10)); // Marge autour du GridPane\r\n        //style du tableau\r\n        table.setStyle(\"-fx-background-color: #bfbaba; -fx-font-size: 15px; -fx-font-weight: bold; -fx-font-family: Monospaced;\");\r\n        // Ajout des titres de lignes\r\n        table.add(new Label(\"Player\"), 0, 0);\r\n        table.add(new Label(\"Moves\"), 0, 1);\r\n        movesPlayer1Label = new Label(\"0\");\r\n        table.add(movesPlayer1Label, 1, 1);\r\n        table.add(new Label(\"Maximal Moves\"), 0, 2);\r\n        movesPlayer2Label = new Label(\"0\");\r\n        table.add(movesPlayer2Label, 2, 1);\r\n        table.add(new Label(\"Player1\"), 1, 0);\r\n        table.add(new Label(\"Player2\"), 2, 0);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        MenuBar menuBar = new MenuBar();\r\n\r\n        Menu fileMenu = new Menu(\"File\");\r\n\r\n        MenuItem newGameMenuItem = new MenuItem(\"New Game\");\r\n        MenuItem restartMenuItem = new MenuItem(\"Restart\");\r\n        MenuItem exitMenuItem = new MenuItem(\"Exit\");\r\n\r\n        newGameMenuItem.setOnAction(e -> startNewGame());\r\n        restartMenuItem.setOnAction(e -> restartGame());\r\n        exitMenuItem.setOnAction(e -> System.exit(0));\r\n\r\n        fileMenu.getItems().addAll(newGameMenuItem, restartMenuItem, exitMenuItem);\r\n\r\n        menuBar.getMenus().add(fileMenu);\r\n        menuBar.setStyle(\"-fx-background-color: #bfbaba; -fx-font-size: 15px; -fx-font-weight: bold; -fx-font-family: Monospaced;\");\r\n\r\n        // creat a new scene with the vbox and Menubar as the root\r\n        Pane root = new Pane();\r\n        title.setLayoutY(120);\r\n        title.setLayoutX(450);\r\n        gridPane.setLayoutX(100);\r\n        gridPane.setLayoutY(200);\r\n        rectangle.setLayoutX(730);\r\n        rectangle.setLayoutY(185);\r\n        table.setLayoutX(870);\r\n        table.setLayoutY(520);\r\n        rectanglePlayer1.setLayoutX(800);\r\n        rectanglePlayer1.setLayoutY(200);\r\n        rectanglePlayer2.setLayoutX(1150);\r\n        rectanglePlayer2.setLayoutY(200);\r\n        root.getChildren().add(title);\r\n        root.getChildren().add(gridPane);\r\n        root.getChildren().add(menuBar);\r\n        root.getChildren().add(rectangle);\r\n        root.getChildren().add(table);\r\n        root.getChildren().add(rectanglePlayer1);\r\n        root.getChildren().add(rectanglePlayer2);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        Scene scene = new Scene(root, BOX_SIZE * NUM_SQUARES, BOX_SIZE * NUM_SQUARES);\r\n\r\n        stage.setScene(scene);\r\n\r\n        stage.setMinWidth(BOX_SIZE * NUM_SQUARES + 20);\r\n        stage.setMinHeight(BOX_SIZE * NUM_SQUARES);\r\n        stage.setFullScreen(true);\r\n\r\n        stage.show();\r\n\r\n    }\r\n\r\n    private void startNewGame() {\r\n        gridPane.getChildren().forEach(node -> {\r\n            if (node instanceof Rectangle) {\r\n                Rectangle square = (Rectangle) node;\r\n                square.setDisable(false);\r\n                resetRectangleColor(square);\r\n            }\r\n            movesPlayer1 = 0;\r\n            movesPlayer1Label.setText(String.valueOf(movesPlayer1));\r\n            movesPlayer2 = 0;\r\n            movesPlayer2Label.setText(String.valueOf(movesPlayer2));\r\n        });\r\n\r\n\r\n        this.currentPlayer = 1;\r\n        if (this.currentPlayer == 1) {\r\n            rectanglePlayer1.setFill(FIRST_PLAYER_COLOR);\r\n            rectanglePlayer1.setStroke(Color.BLACK);\r\n            rectanglePlayer2.setFill(DEFAULT_FILL_COLOR);\r\n            rectanglePlayer2.setStroke(Color.BLACK);\r\n        } else {\r\n            rectanglePlayer2.setFill(SECOND_PLAYER_COLOR);\r\n            rectanglePlayer2.setStroke(Color.BLACK);\r\n            rectanglePlayer1.setFill(DEFAULT_FILL_COLOR);\r\n            rectanglePlayer1.setStroke(Color.BLACK);\r\n        }\r\n\r\n\r\n        System.out.println(\"Starting a new game!\");\r\n    }\r\n\r\n    private void restartGame() {\r\n        gridPane.getChildren().forEach(node -> {\r\n            if (node instanceof Rectangle) {\r\n                Rectangle square = (Rectangle) node;\r\n                square.setDisable(false);\r\n                resetRectangleColor(square);\r\n            }\r\n            movesPlayer1 = 0;\r\n            movesPlayer1Label.setText(String.valueOf(movesPlayer1));\r\n            movesPlayer2 = 0;\r\n            movesPlayer2Label.setText(String.valueOf(movesPlayer2));\r\n            if (this.currentPlayer == 1) {\r\n                rectanglePlayer1.setFill(FIRST_PLAYER_COLOR);\r\n                rectanglePlayer1.setStroke(Color.BLACK);\r\n                rectanglePlayer2.setFill(DEFAULT_FILL_COLOR);\r\n                rectanglePlayer2.setStroke(Color.BLACK);\r\n            } else {\r\n                rectanglePlayer2.setFill(SECOND_PLAYER_COLOR);\r\n                rectanglePlayer2.setStroke(Color.BLACK);\r\n                rectanglePlayer1.setFill(DEFAULT_FILL_COLOR);\r\n                rectanglePlayer1.setStroke(Color.BLACK);\r\n            }\r\n        });\r\n\r\n\r\n        this.currentPlayer = 1;\r\n\r\n        System.out.println(\"Restarting the game!\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Event handler for square click\r\n    private void onSquareClicked(MouseEvent event) {\r\n        Rectangle neighbourSquare = getNeighbourSquare((Rectangle) event.getSource());\r\n        if (neighbourSquare != null) {\r\n            Rectangle clickedSquare = (Rectangle) event.getSource();\r\n\r\n            if (this.currentPlayer == 1) {\r\n                movesPlayer1++;\r\n                movesPlayer1Label.setText(String.valueOf(movesPlayer1));\r\n            } else {\r\n                movesPlayer2++;\r\n                movesPlayer2Label.setText(String.valueOf(movesPlayer2));\r\n            }\r\n            if(this.currentPlayer == 2){\r\n                rectanglePlayer1.setFill(FIRST_PLAYER_COLOR);\r\n                rectanglePlayer1.setStroke(Color.BLACK);\r\n                rectanglePlayer2.setFill(DEFAULT_FILL_COLOR);\r\n                rectanglePlayer2.setStroke(Color.BLACK);\r\n            }else{\r\n                rectanglePlayer2.setFill(SECOND_PLAYER_COLOR);\r\n                rectanglePlayer2.setStroke(Color.BLACK);\r\n                rectanglePlayer1.setFill(DEFAULT_FILL_COLOR);\r\n                rectanglePlayer1.setStroke(Color.BLACK);\r\n            }\r\n            Paint currentPlayerColor = this.currentPlayer == 1 ? FIRST_PLAYER_COLOR : SECOND_PLAYER_COLOR;\r\n            Paint currentPlayerStorkColor = DEFAULT_STROKE_COLOR;\r\n            // filling the bottom square with the color of the current player\r\n            // filling the square with the color of the current player\r\n            clickedSquare.setFill(currentPlayerColor);\r\n            clickedSquare.setStroke(currentPlayerStorkColor);\r\n            // disable the square\r\n            clickedSquare.setDisable(true);\r\n            // filling the bottom square with the color of the current player\r\n            neighbourSquare.setFill(currentPlayerColor);\r\n            neighbourSquare.setStroke(currentPlayerStorkColor);\r\n            // disable the square\r\n            neighbourSquare.setDisable(true);\r\n\r\n            //toggle player\r\n            this.currentPlayer = this.currentPlayer == 1 ? 2 : 1;\r\n\r\n            // check if the game is over\r\n            checkIfGameIsOver();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void checkIfGameIsOver() {\r\n        // enhance this function\r\n        for (int row = 0; row < NUM_SQUARES; row++) {\r\n            for (int col = 0; col < NUM_SQUARES; col++) {\r\n                Rectangle square = (Rectangle) gridPane.getChildren().get(row * NUM_SQUARES + col);\r\n                Rectangle neighbourSquare = getNeighbourSquare(square);\r\n                if (!square.isDisable() && neighbourSquare != null && !neighbourSquare.isDisable()) return;\r\n            }\r\n        }\r\n        // announce that the game is over\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(\"Game Over\");\r\n        alert.setHeaderText(null);\r\n        Text text = new Text(\"Winner is player \" + (this.currentPlayer == 1 ? 2 : 1));\r\n        text.setStyle(\"-fx-font-size: 20px; -fx-font-weight: bold; -fx-font-family: Monospaced;\");\r\n        alert.setContentText(text.getText());\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    static private void resetRectangleColors(Rectangle... rectangles) {\r\n        // call resetRectangleColor for each rectangle in the list\r\n        Arrays.stream(rectangles).forEach(MainApplication::resetRectangleColor);\r\n    }\r\n\r\n    private static void resetRectangleColor(Rectangle rectangle) {\r\n        if (rectangle == null || rectangle.isDisable()) return;\r\n        int row = (int) rectangle.getProperties().get(\"row\");\r\n        int col = (int) rectangle.getProperties().get(\"col\");\r\n        // set the previous color of the rectangle\r\n        // set the default color of the rectangle\r\n        rectangle.setFill((row + col) % 2 == 0 ? DEFAULT_FILL_COLOR : DEFAULT_FILL_COLOR_2); // Set the fill color to transparent\r\n        rectangle.setStroke(DEFAULT_STROKE_COLOR); // Set the border color\r\n    }\r\n\r\n\r\n\r\n\r\n    private Rectangle getNeighbourSquare(Rectangle rectangle) {\r\n        int clickedSquareRow = (int) rectangle.getProperties().get(\"row\");\r\n        int clickedSquareCol = (int) rectangle.getProperties().get(\"col\");\r\n        // check the current player\r\n        if (this.currentPlayer == 1)\r\n            return this.gridPane.getChildren().stream().filter(node -> GridPane.getRowIndex(node) == clickedSquareRow + 1 && GridPane.getColumnIndex(node) == clickedSquareCol && !node.isDisable()).map(node -> (Rectangle) node).findFirst().orElse(null);\r\n        else\r\n            return this.gridPane.getChildren().stream().filter(node -> GridPane.getRowIndex(node) == clickedSquareRow && GridPane.getColumnIndex(node) == clickedSquareCol + 1 && !node.isDisable()).map(node -> (Rectangle) node).findFirst().orElse(null);\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/domineering/MainApplication.java b/src/main/java/com/example/domineering/MainApplication.java
--- a/src/main/java/com/example/domineering/MainApplication.java	(revision 6fbc6b01056caef11769cd6fe77e965bc022f22c)
+++ b/src/main/java/com/example/domineering/MainApplication.java	(date 1700858508619)
@@ -342,7 +342,7 @@
         Text text = new Text("Winner is player " + (this.currentPlayer == 1 ? 2 : 1));
         text.setStyle("-fx-font-size: 20px; -fx-font-weight: bold; -fx-font-family: Monospaced;");
         alert.setContentText(text.getText());
-        alert.showAndWait();
+        alert.show();
     }
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4f1eaf66-04c2-480a-a7d3-97112feb4f2b\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/domineering/MainApplication.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/domineering/MainApplication.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2YHRj7vNZXOOqfImRESIjR7lUVf\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/telechargement/crudlsi&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.27471265&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"MainApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.domineering.MainApplication\" />\r\n      <module name=\"Domineering_AI\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.domineering.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MainApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4f1eaf66-04c2-480a-a7d3-97112feb4f2b\" name=\"Changes\" comment=\"\" />\r\n      <created>1700180653062</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1700180653062</updated>\r\n      <workItem from=\"1700180654149\" duration=\"3642000\" />\r\n      <workItem from=\"1700222480180\" duration=\"2713000\" />\r\n      <workItem from=\"1700252709465\" duration=\"5633000\" />\r\n      <workItem from=\"1700344130959\" duration=\"397000\" />\r\n      <workItem from=\"1700344544745\" duration=\"39000\" />\r\n      <workItem from=\"1700344607320\" duration=\"11561000\" />\r\n      <workItem from=\"1700825971086\" duration=\"607000\" />\r\n      <workItem from=\"1700826651780\" duration=\"13830000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6fbc6b01056caef11769cd6fe77e965bc022f22c)
+++ b/.idea/workspace.xml	(date 1700858542001)
@@ -93,7 +93,7 @@
       <workItem from="1700344544745" duration="39000" />
       <workItem from="1700344607320" duration="11561000" />
       <workItem from="1700825971086" duration="607000" />
-      <workItem from="1700826651780" duration="13830000" />
+      <workItem from="1700826651780" duration="14814000" />
     </task>
     <servers />
   </component>
